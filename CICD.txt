===========================================================================
Jenkins
===========================================================================

Create IAM Role - name : EC2-EKS-Acccess
Make sure IAM Role is Available with the Following Permissions.

    VPCFullAccess
    CloudFormationFullAccess
    IAMFullAccess
    EC2FullAccess
    AdminFullAccess
    AdministratorAccess


Create an EC2 Instance for Jenkins host and associate IAM instance profile "EC2-EKS-Acccess" with it.

----------------------------------------------------------------------------

Install the following software on Jenkins Server

    1. Java
    2. Git
    3. Maven
    4. Docker
    5. Jenkins

Note : We will use Ansible to software installation.

Jenkins User details    
    Username : admin
    Password : admin
    Email    : admin@gmail.com

----------------------------------------------------------------------------
Configure Jenkins
----------------------------------------------------------------------------

Install Docker Plug-Ins in Jenkins Server

    Dashboard > Manage Jenkins > Plug-Ins

    a) Goto Jenkins Dashboard
    b) Click on Manage Jenkins
    c) Click on Manage Plug-Ins
    d) Click on Available and Search for Docker Pipeline
    e) Select- Docker Pipeline Version 1.29 and Click on Install without Restart
    f) Select the Checkbox - Restart Jenkins when Installation is Complete

Install Maven Plug-Ins in Jenkins Server

    Dashboard > Manage Jenkins > Plug-Ins

    a) Goto Jenkins Dashboard
    b) Click on Manage Jenkins
    c) Click on Manage Plug-Ins
    d) Click on Available and Search for Maven Integration
    e) Select- Maven Integration and Click on Install without Restart
    f) Select the Checkbox - Restart Jenkins when Installation is Complete

Configure JDK in Jenkins Server

    Dashboard > Manage Jenkins > Tools

    a) Goto Jenkins Dashboard
    b) Click on Manage Jenkins
    c) Click on Tool
    d) Click on Add JDK button and Provide the following

        Name : MyJDK
        Uncheck Install automatically
        JAVA_HOME : /usr/lib/jvm/java-17-openjdk-amd64

    e) Click on Apply and Save

Configure Maven in Jenkins Server

    Dashboard > Manage Jenkins > Tools

    a) Goto Jenkins Dashboard
    b) Click on Manage Jenkins
    c) Click on Tool
    d) Click on Add Maven button and Provide the following

        Name : MyMaven
        Uncheck Install automatically
        MAVEN_HOME : /usr/share/maven

    e) Click on Apply and Save

Configure DockerHub Credentials in Jenkins Server

    Dashboard > Manage Jenkins > Credentials > System > Global credentials (unrestricted)

    a) Goto Jenkins Dashboard
    b) Click on Manage Jenkins
    c) Click on Manage Credentials
    d) Click on Jenkins
    e) Select Credentials
    f) Select Add Credentials
    g) Provide the following and Click on Create 

        Kind : Username with Password
        Username : [DOCKER_HUB_USERNAME]
        Password : [DOCKER_HUB_PASSWORD]
        Id: MyDockerHub

Note : Currently this Option does not works so configuration of credentials not required.

----------------------------------------------------------------------------
Create A Pipeline Job 
----------------------------------------------------------------------------

    Dashboard > New Item 
        Name = DevOpsTest Project
        Select = Pipeline Option
        Click on OK 

        Description = DevOpsTest demo Project Pipeline
        Check Do not allow concurrent builds
            Check Abort previous builds
        Build Triggers = GitHub hook trigger for GITScm polling
                Open GitHub Proect repository and add the GitHub Hook as following
                     http://[JENKINS_HOST]:8080/github-webhook/
        
        Pipeline > Definition 
            Select Pipeline Script from SCM
            Select SCM Git
            Add Repository URL = https://[ACCESS_TOKEN]@github.com/TechHubRepo/devopstest.git
            Branches to build Select Master

    Click on Apply and Save

Change the Code and Push to GitHub

===========================================================================
Setup the Kubernetes Management Host
===========================================================================

Launch Linux EC2 Instance
---------------------------------------------------------------------------
Name of Instance = K-Management-Host

Step 1: Choose an Amazon Machine Image (AMI)

    O.S Software : Ubuntu Server 22.04 LTS (HVM), SSD Volume Type

Step 2: Choose an Instance Type

    Select : t2.xlarge (- ECUs, 4 vCPUs, 2.3 GHz, -, 16 GiB memory, EBS only)

Step 3: Configure Instance Details
    
    Choosr Role : EC2-EKS-Acccess

Step 4: Add Storage

    Storage : 25GB

Step 5: Configure Security Group

Step 6: Review Instance Launch

Step 7: Install the following softwares on K-Management-Host

    kubectl
    eksctl
    aws-iam-authenticator
    unzip
    aws-cli
    helm

